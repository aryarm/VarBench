import warnings
from pathlib import Path
from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("6.3.0")

configfile: "config/config.yaml"

out = Path(config['results_dir'])
data = Path(config['data_dir'])
datasets = {'illumina': config['illumina'], 'ont': config['ont']}


rule all:
   input:	
        truth_set = str(Path(data))+"/HG001_GRCh38_GIAB_highconf_CG-IllFB-IllGATKHC-Ion-10X-SOLID_CHROM1-X_v.3.3.2_highconf_PGandRTGphasetransfer.vcf.gz"


rule download_data:
    params:
        data_dir = str(data)
    output:
        truth_set = str(data))+"/HG001_GRCh38_GIAB_highconf_CG-IllFB-IllGATKHC-Ion-10X-SOLID_CHROM1-X_v.3.3.2_highconf_PGandRTGphasetransfer.vcf.gz"
    conda: "envs/default.yaml"
    shell:
        "scripts/download_giab.sh {params.data_dir}"

run clair:
    input:
        bam = expand()
    output:
        vcf = expand()
    params:
        data_dir = str(data)
        model = "resources/clair_models/ont",
        ref = "resources/hg38/hg38.fa",
        output_prefix = "NA12878_ont", 
        sample_name = "NA12878_ont",
    conda: "envs/clair.yaml"
    threads: 4
    shell:
        """
        COMMAND=mktemp 
        CLAIR=$(which clair.py)
        
        python clair.py callVarBamParallel \
        --chkpnt_fn "{params.model}" \
        --ref_fn "{params.ref}" \
        --bam_fn "{input.bam}" \
        --threshold 0.2 \ # what is this?
        --sampleName "{params.sample_name}" \ 
        --output_prefix "{params.output_prefix}" > $COMMAND
        
        # run Clair with 4 concurrencies
        cat $COMMAND | parallel -j{threads}
        
        # Find incomplete VCF files and rerun them
        for i in {params.output_prefix}.*.vcf; do if ! [ -z "$(tail -c 1 "$i")" ]; then echo "$i"; fi ; done | grep -f - $COMMAND | sh
        
        # concatenate vcf files and sort the variants called
        vcfcat {params.output_prefix}.*.vcf | bcftools sort -m 2G | bgziptabix snp_and_indel.vcf.gz
        """
        
rule nanosv:
    input:
        bam = expand()
    output:
        vcf = expand()
    params:
        data_dir = str(data)
        ref = "resources/hg38/hg38.fa",
        output_prefix = "NA12878_ont", 
        sample_name = "NA12878_ont",
    conda: "envs/nanosv.yaml"
    threads: 4
    shell:
        """
        NanoSV -t {threads} -s $(which samtools) {input.bam} -o {output.vcf}
        """

rule nanopolish:
    input:
        fq = expand() 
        bam = expand()
    output:
        vcf = expand()
    params:
        data_dir = str(data)
    conda: "envs/nanopolish.yaml"
    threads: 4
    shell:
        """
        nanopolish variants --reads {input.fq} --bam {input.bam} -p 1 --outfile {output.vcf} 
        """